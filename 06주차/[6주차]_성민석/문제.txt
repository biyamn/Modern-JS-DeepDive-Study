클래스의 constructor, 프로토타입 메서드, 정적 메서드의 역할과 특징에 대해 설명하시오.


클래스 몸체에서 정의할 수 있는 메서드는 constructor, 프로토타입 메서드, 정적 메서드 세 가지가 있다.
// 클래스 선언문
class Person {
  // 생성자
  constructor(name) {
    // 인스턴스 생성 및 초기화
    this.name = name; // name 프로퍼티는 public하다.
  }

  // 프로토타입 메서드
  sayHi() {
    console.log(`Hi! My name is ${this.name}`);
  }

  // 정적 메서드
  static sayHello() {
    console.log('Hello!');
  }
}
const me = new Person('Lee');
me.sayHi(); // Hi! My name is Lee
Person.sayHello(); // Hi!


1. constructor : constructor는 인스턴스를 생성하고 초기화하기 위한 특수한 메서드이다, 추가로 이름변경이 불가능하다
클래스가 평가되어 생성된 함수 객체나 클래스가 생성한 인스턴스에는 constructor메서드가 존재하지 않는다.
constructor는 메서드로 해석되지 않고 클래스가 평가되어 생성한 함수 객체 코드의 일부가 된다.
클래스에 2개 이상의 constructor를 포함하면 문법 에러가 발생한다.
constructor는 생략 가능하다


2. 프로토타입 메서드
클래스 몸체에 정의한 메서드는 기본적으로 프로토타입 메서드가 된다


3. 정적메서드
정적(static)메서드는 인스턴스를 생성하지 않아도 호출할 수 있는 메서드를 말한다
정적 메서드는 클래스에 바인딩된 메서드가 된다.
클래스는 함수 객체로 평가되므로 자신의 프로퍼티/메서드를 소유할 수 있다.
정적 메서드는 인스턴스로 호출할 수 없다
정적 메서드가 바인딩된 클래스는 인스턴스의 프로토타입 체인상에 존재하지 않는다

정적메서드 vs 프로토타입 메서드
1. 정적 메서드와 프로토타입 메서드는 자신이 속해있는 프로토타입 체인이 다르다.
2. 정적 메서드는 클래스로 호출하고 프로토타입 메서드는 인스턴스로 호출한다.
3. 정적 메서드는 인스턴스 프로퍼티를 참조할 수 없지만 프로토타입 메서드는 인스턴스 프로퍼티를 참조할 수 있다.
